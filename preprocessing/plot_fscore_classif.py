# plot_selectkbest_scores.py

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def plot_selectkbest_scores(score_dataframes_list, title="Top Feature Scores from SelectKBest",
                            top_n_features=20, dataframe_index_to_plot=-1, score_column='Score'):
    """
    Plots the top N feature scores from a SelectKBest operation.

    Args:
        score_dataframes_list (list): A list of pandas DataFrames. Each DataFrame is expected
                                      to have at least 'Feature' and 'Score' (or specified
                                      score_column) columns, typically generated by
                                      select_features_univariate.
        title (str): The title for the plot.
        top_n_features (int): The number of top features to display in the plot.
        dataframe_index_to_plot (int): The index of the DataFrame in the list to use for plotting.
                                       Defaults to -1 (the last DataFrame).
        score_column (str): The name of the column in the DataFrame that contains the scores
                            to be plotted (e.g., 'Score' or 'P-value'). For P-values, lower
                            values indicate higher importance, so sorting will be ascending.
    """
    if not score_dataframes_list:
        print("The input list of score DataFrames is empty. Nothing to plot.")
        return

    try:
        # Select the DataFrame to plot based on the provided index
        df_to_plot = score_dataframes_list[dataframe_index_to_plot]
    except IndexError:
        print(f"Error: dataframe_index_to_plot ({dataframe_index_to_plot}) is out of bounds.")
        print(f"Please provide an index between {-len(score_dataframes_list)} and {len(score_dataframes_list) - 1}.")
        return

    if 'Feature' not in df_to_plot.columns or score_column not in df_to_plot.columns:
        print(f"Error: The selected DataFrame must contain '{'Feature'}' and '{score_column}' columns.")
        return

    # Sort features by score (descending for 'Score', ascending for 'P-value')
    ascending_sort = False if score_column == 'Score' else True # P-values are better when lower
    
    # Ensure scores are numeric, coerce errors to NaN and drop if necessary
    df_to_plot[score_column] = pd.to_numeric(df_to_plot[score_column], errors='coerce')
    df_to_plot = df_to_plot.dropna(subset=[score_column])

    sorted_features = df_to_plot.sort_values(by=score_column, ascending=ascending_sort).head(top_n_features)

    if sorted_features.empty:
        print(f"No features found in the DataFrame after sorting or after handling missing scores.")
        return

    plt.figure(figsize=(12, 8))
    sns.barplot(x=score_column, y='Feature', data=sorted_features, palette='viridis')
    plt.title(title, fontsize=16)
    plt.xlabel(f'{score_column} Value', fontsize=12)
    plt.ylabel('Feature Name', fontsize=12)
    plt.grid(axis='x', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()
